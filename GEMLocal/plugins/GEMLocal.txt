// -*- C++ -*-
//
// Package:    GEMLocal
// Class:      GEMLocal
// 
/**\class GEMLocal GEMLocal.cc GEMAnalysis/GEMLocal/plugins/GEMLocal.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  
//         Created:  Thu, 24 Oct 2013 11:19:56 GMT
// $Id$
//
//


// system include files
#include <memory>

// root include files
#include "TFile.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TF1.h"
#include "THStack.h"
#include "TLegend.h"
#include "TLatex.h"
#include "TTree.h"
#include "TCanvas.h"
#include "TDirectoryFile.h"
#include "TGraph.h"
#include "TGraphErrors.h"
#include "TGraphAsymmErrors.h"

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "FWCore/Framework/interface/ESHandle.h" //?
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/ServiceRegistry/interface/Service.h"

#include "CommonTools/UtilAlgos/interface/TFileService.h"

#include <DataFormats/GEMRecHit/interface/GEMRecHit.h>
#include "DataFormats/GEMRecHit/interface/GEMRecHitCollection.h"
#include <DataFormats/MuonDetId/interface/GEMDetId.h>
#include "DataFormats/Provenance/interface/Timestamp.h"
#include "DataFormats/GEMDigi/interface/GEMDigiCollection.h"
#include "DataFormats/GeometryVector/interface/LocalPoint.h"
#include "DataFormats/GeometrySurface/interface/LocalError.h"

#include "DataFormats/Scalers/interface/DcsStatus.h"
#include "DataFormats/Common/interface/Handle.h"
#include "DataFormats/Math/interface/deltaPhi.h"
#include "SimDataFormats/Track/interface/SimTrackContainer.h"

#include "SimDataFormats/TrackingHit/interface/PSimHitContainer.h"

#include "Geometry/GEMGeometry/interface/GEMGeometry.h"
#include <Geometry/GEMGeometry/interface/GEMEtaPartition.h>
#include "Geometry/GEMGeometry/interface/GEMEtaPartitionSpecs.h"
#include <Geometry/Records/interface/MuonGeometryRecord.h>
#include <Geometry/CommonDetUnit/interface/GeomDet.h>
#include <Geometry/CommonTopologies/interface/RectangularStripTopology.h>
#include <Geometry/CommonTopologies/interface/TrapezoidalStripTopology.h>
#include "Geometry/CommonTopologies/interface/StripTopology.h"
//#include "DataFormats/Math/interface/deltaR.h"

#include "RecoMuon/Records/interface/MuonRecoGeometryRecord.h"
#include "RecoMuon/DetLayers/interface/MuonDetLayerGeometry.h"
#include "RecoMuon/DetLayers/interface/MuRodBarrelLayer.h"
#include "RecoMuon/DetLayers/interface/MuDetRod.h"
#include "RecoMuon/DetLayers/interface/MuRingForwardDoubleLayer.h"
#include "RecoMuon/DetLayers/interface/MuDetRing.h"


class GEMLocal : public edm::EDAnalyzer {
   public:
      explicit GEMLocal(const edm::ParameterSet&);
      ~GEMLocal();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);


   private:
      virtual void beginJob() ;
      virtual void analyze(const edm::Event&, const edm::EventSetup&) ;
      virtual void endJob() ;

      //virtual void beginRun(edm::Run const&, edm::EventSetup const&) override;
      //virtual void endRun(edm::Run const&, edm::EventSetup const&) override;
      //virtual void beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;
      //virtual void endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;

      // ----------member data ---------------------------
      std::map<std::string,TH1F*> histContainer_;
      std::map<std::string,TH2F*> histContainer2D_; 
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
GEMLocal::GEMLocal(const edm::ParameterSet& iConfig):
histContainer_()
{
   //now do what ever initialization is needed

}


GEMLocal::~GEMLocal()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called for each event  ------------
void
GEMLocal::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   using namespace edm;

  edm::Handle<GEMRecHitCollection> GEMrecHits;
  iEvent.getByLabel("gemRecHits","",GEMrecHits);

  edm::Handle<edm::PSimHitContainer> GEMsimHits;
  iEvent.getByLabel(edm::InputTag("g4SimHits","MuonGEMHits"), GEMsimHits);

  edm::Handle<GEMDigiCollection> GEMdigis;
  iEvent.getByLabel(edm::InputTag("simMuonGEMDigis"), GEMdigis);

  edm::ESHandle<GEMGeometry> GEMgeo;
  //iSetup.get<MuonGeometryRecord>().get(GEMgeo);

/*
  int Ndigis = 0;
  int Ndigis_tot = 0;
  for(GEMDigiCollection::DigiRangeIterator digi = GEMdigis->begin(); digi != GEMdigis->end(); ++digi)
  {
  	Ndigis++;  
  	Ndigis_tot++;  

	histContainer_["N_Digis"]->Fill(1);
  }

  std::cout<<"n of SemHits: "<<GEMsimHits->size()<<std::endl;
  std::cout<<"n of Digis: "<<Ndigis<<std::endl;
  std::cout<<"n of RecHits: "<<GEMrecHits->size()<<std::endl;
*/
std::cout<<" ************SIM Hits: "<<std::endl;
for (edm::PSimHitContainer::const_iterator itHit = GEMsimHits->begin(); itHit != GEMsimHits->end(); ++itHit)
  {
	histContainer_["N_SimHit"]->Fill(1);

	int PID = std::abs(itHit->particleType());
	float x_sim = itHit->localPosition().x();
	float y_sim = itHit->localPosition().y();
	const GEMDetId id(itHit->detUnitId());
	std::cout<<id<<" PiD "<<PID<<std::endl;
	//std::cout<<itHit->detUnitId()<<std::endl;
	std::cout<<" SimHit "<<" x: "<<x_sim<<" y "<<y_sim<<std::endl;
  }

//edm::ESHandle<GEMGeometry> gem_geo;
//iSetup.get<MuonGeometryRecord>().get(gem_geo);

 int Ndigis = 0;
//////////
std::cout<<" ************DIGI : "<<std::endl;
  GEMDigiCollection::DigiRangeIterator DigiDetUnit;
  for (DigiDetUnit = GEMdigis->begin(); DigiDetUnit != GEMdigis->end(); ++DigiDetUnit)
  {	

//        const GEMEtaPartition * roll = GEMgeo->etaPartition(id);
        int Nroll = (Short_t) (*DigiDetUnit).first.roll();
        std::cout<<(*DigiDetUnit).first<<""<<Nroll<<std::endl;

        GEMDigiCollection::const_iterator digiItr;
        //loop over digis of given roll
        for (digiItr = (*DigiDetUnit).second.first; digiItr != (*DigiDetUnit).second.second; ++digiItr)
        {

                double strip = (Short_t) digiItr->strip();
                double bx = (Short_t) digiItr->bx();
                //double size = (Short_t) digiItr->size();
                //std::cout<<strip<<" "<<bx<<" "<<size<<std::endl;
                std::cout<<" strip "<<strip<<" bx "<<bx<<std::endl;
        	double strip_successiva = (Short_t) (digiItr+1)->strip();
                std::cout<<" strip_successiva "<<strip_successiva<<std::endl;
	if (strip_successiva != (strip+1)){        
	Ndigis++;
        histContainer_["N_Digis"]->Fill(1);
	}
		GEMDetId id = (*DigiDetUnit).first;
//		std::cout<<id<<std::endl;
	        const GEMEtaPartition* roll = GEMgeo->etaPartition(id);
//	        const GEMEtaPartition* roll = GEMgeo->etaPartition((*DigiDetUnit).first);
//		std::cout<<roll<<std::endl;
//    		LocalPoint lp = gem_geo->etaPartition(id)->centreOfStrip(digiItr->strip());
		LocalPoint lp = roll->centreOfStrip(digiItr->strip());
    		double x_digi = (double) lp.x();
                double y_digi = (double) lp.y();
                std::cout<<" Digi "<<" x: "<<x_digi<<" y "<<y_digi<<std::endl;

/*		for (GEMRecHitCollection::const_iterator recHit = GEMrecHits->begin(); recHit != GEMrecHits->end(); ++recHit)
  		{
        	std::cout<<(*recHit).gemId()<<std::endl;
    			float x_reco = recHit->localPosition().x();
    			float y_reco = recHit->localPosition().y();
			double clusterSize = recHit->clusterSize();
                        std::cout<<" RecHit "<<" x: "<<x_reco<<" y "<<y_reco<<" cluster size "<<clusterSize<<std::endl;
		}
*/        }// end digi per roll

  }

/////////
std::cout<<" ************REC Hits: "<<std::endl;
for (GEMRecHitCollection::const_iterator recHit = GEMrecHits->begin(); recHit != GEMrecHits->end(); ++recHit)
 {
                std::cout<<(*recHit).gemId()<<std::endl;
		
		histContainer_["N_RecHit"]->Fill(1);
               
		float x_reco = recHit->localPosition().x();
                float err_x_reco = recHit->localPositionError().xx();
                float y_reco = recHit->localPosition().y();
                double clusterSize = recHit->clusterSize();
		std::cout<<" RecHit "<<" x: "<<x_reco<<" x_err "<<err_x_reco<<" y "<<y_reco<<" cluster size "<<clusterSize<<std::endl;
 }

  std::cout<<"n of SemHits: "<<GEMsimHits->size()<<std::endl;
  std::cout<<"n of Digis: "<<Ndigis<<std::endl;
  std::cout<<"n of RecHits: "<<GEMrecHits->size()<<std::endl;


// Reco-Sim
for (GEMRecHitCollection::const_iterator recHit = GEMrecHits->begin(); recHit != GEMrecHits->end(); ++recHit)
  {
    	float x_reco = recHit->localPosition().x();
    	float err_x_reco = recHit->localPositionError().xx();
 	////   float y_reco = recHit->localPosition().y();
    	unsigned int detId = (unsigned int) (*recHit).gemId();
    	//gem_recHit_.bx = recHit->BunchX();
    	//gem_recHit_.clusterSize = recHit->clusterSize();
    	//gem_recHit_.firstClusterStrip = recHit->firstClusterStrip();

    	//GEMDetId id((*recHit).gemId());
 	////std::cout<<" x: "<<x_reco<<" +- "<<err_x_reco<<std::endl;
	 ////std::cout<<" y: "<<y_reco<<std::endl;

  	for (edm::PSimHitContainer::const_iterator itHit = GEMsimHits->begin(); itHit != GEMsimHits->end(); ++itHit)
  	{
  		////std::cout<<"sim detId "<<itHit->detUnitId()<<std::endl;
  		////std::cout<<"rec detId "<<detId<<std::endl;
  		if (itHit->detUnitId() == detId){

    			float x_sim = itHit->localPosition().x();
			histContainer2D_["hGEM_simVSrec"]->Fill(x_sim, x_reco);
		if (std::abs(itHit->particleType())==13){
    			//float err_x_sim = itHit->localPositionError().xx();
    			////float y_sim = itHit->localPosition().y();
    			float dX = x_sim - x_reco;
    			float pull = dX/std::sqrt(err_x_reco);
			 std::cout<<"++++++++++++++++"<<std::endl;
			/* std::cout<<" x_reco: "<<x_reco<<" +- "<<err_x_reco<<std::endl;
			 std::cout<<" x_sim: "<<x_sim<<std::endl;
 			std::cout<<" y_reco: "<<y_reco<<std::endl;
			 std::cout<<" y_sim: "<<y_sim<<std::endl;
 			std::cout<<" dX: "<<dX<<std::endl;
			 std::cout<<" pull: "<<pull<<std::endl;*/
		
			 histContainer_["N_eventi"]->Fill(1);
			 histContainer_["DeltaX"]->Fill(dX);
			 histContainer_["RecoLocalX"]->Fill(x_reco);
			 histContainer_["RecoLocalErrorX"]->Fill(err_x_reco);
			 histContainer_["DeltaX_over_err"]->Fill(pull);
			

     		}//end muon
     		}//end same det id

   	}// end sim hit
  }// end rec hit



}// analyze




/*#ifdef THIS_IS_AN_EVENT_EXAMPLE
   Handle<ExampleData> pIn;
   iEvent.getByLabel("example",pIn);
#endif
   
#ifdef THIS_IS_AN_EVENTSETUP_EXAMPLE
   ESHandle<SetupData> pSetup;
   iSetup.get<SetupRecord>().get(pSetup);
#endif*/



// ------------ method called once each job just before starting event loop  ------------
void 
GEMLocal::beginJob()
{ edm::Service<TFileService> fs;
 histContainer_["N_eventi"]=fs->make<TH1F>("N_eventi", "count",    2,   0., 2.);
 histContainer_["N_SimHit"]=fs->make<TH1F>("N_SimHit", "count",    2,   0., 2.);
 histContainer_["N_Digis"]=fs->make<TH1F>("N_Digi", "count",    2,   0., 2.);
 histContainer_["N_RecHit"]=fs->make<TH1F>("N_RecHit", "count",    2,   0., 2.);
 histContainer_["DeltaX"]=fs->make<TH1F>("DeltaX", "xmc - x_rec",    50,   -2., 2.);
 histContainer_["RecoLocalX"]=fs->make<TH1F>("RecoLocalX", "x_rec",    400,   -20., 20.);
 histContainer_["RecoLocalErrorX"]=fs->make<TH1F>("RecoLocalErrorX", "xmc - x_rec",    20,   -0.2, 0.2);
 histContainer_["DeltaX_over_err"]=fs->make<TH1F>("DeltaX_over_err", "xmc - x_rec / sigma_err",    500,   -15., 15.);

 histContainer2D_["hGEM_simVSrec"] = fs->make<TH2F>("hGEM_simVSrec", "x_sim vs x_rec", 400, -20, 20, 400, -20, 20);
}

// ------------ method called once each job just after ending the event loop  ------------
void 
GEMLocal::endJob() 
{
}

// ------------ method called when starting to processes a run  ------------
/*
void 
GEMLocal::beginRun(edm::Run const&, edm::EventSetup const&)
{
}
*/

// ------------ method called when ending the processing of a run  ------------
/*
void 
GEMLocal::endRun(edm::Run const&, edm::EventSetup const&)
{
}
*/

// ------------ method called when starting to processes a luminosity block  ------------
/*
void 
GEMLocal::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}
*/

// ------------ method called when ending the processing of a luminosity block  ------------
/*
void 
GEMLocal::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}
*/

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
GEMLocal::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

//define this as a plug-in
DEFINE_FWK_MODULE(GEMLocal);
